# Python CircleCI 2.0 configuration file
#

# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            mkdir test-reports
            pytest --junitxml=test-reports/junit.xml
          post:
            coveralls 

      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: test-reports   
          destination: test-reports
  push:
    machine:
      docker_layer_caching: true
      enabled: true
    working_directory: ~/repo
    environment:
      IMAGE_REPO: lambombo/semantics_sentenceanalyzer
      TARGET: ubuntu-14.04-XXL
      _TARGET: ubuntu-14_04-XXL
    steps:
      - checkout
      - run: echo -n "$(git rev-parse --short HEAD)" > _tag
      - run: echo "Building $IMAGE_REPO:$(cat _tag)"
      - run:
          command: |
            docker build \
            $NO_CACHE \
            --build-arg IMAGE_TAG=$(cat _tag) \
            -t $IMAGE_REPO:$(cat _tag) \
            .

      - run: docker rm --force $TARGET-test || true

      - run:
          command: |
            docker run -d \
                       -p 80:5000 --name $TARGET-test \
                       $IMAGE_REPO:$(cat _tag)
            sleep 20

      - run: curl localhost

      - run: docker rm --force $TARGET-test || true

      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS

      - run: 
          command: |
            if [ $CIRCLE_BRANCH = ‘master’ ]; then
              for i in 1 2 3; do
                docker push $IMAGE_REPO:$(cat _tag)
                if [ $? -eq 0 ]; then
                  exit 0
                fi
                echo "Retrying...."
              done
              exit 1
            fi

      - run:
          command: |
            if [ $CIRCLE_BRANCH = ‘master’ ]; then            
              docker run -d \
                        -p 80:5000 --name $TARGET-test \
                        $IMAGE_REPO:$(cat _tag)
              sleep 20
              curl localhost
            fi

workflows:
  version: 2
  build-test-and-push:
    jobs:
      - build
      - push:
          context: dockerhub
          requires:
            - build